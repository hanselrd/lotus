{
  "rules_old": {
    "displayNames": {
      ".read": "auth !== null",
      "$displayName": {
        // if logged in and (user has no displayName or owns displayName)
        ".write": "auth !== null && (!data.exists() && (!root.child('users').child(auth.uid).child('displayName').exists()) || $displayName === root.child('users').child(auth.uid).child('displayName').val())"
      }
    },
    "roles": {
      // if logged in and is admin
      ".read": "auth !== null && root.child('roles').child(auth.uid).child('admin').val() === true",
      "$uid": {
        // if logged in and has same uid as entry
        ".read": "auth !== null && $uid === auth.uid"
      }
    },
    "users": {
      // if logged in and is admin
      ".read": "auth !== null && root.child('roles').child(auth.uid).child('admin').val() === true",
      "$uid": {
        // if logged in and has same uid as entry
        ".read": "auth !== null && $uid === auth.uid",
        // if logged in and has same uid as entry
        ".write": "auth !== null && $uid === auth.uid",
        // if new data has email, displayName fields
        ".validate": "newData.hasChildren(['email', 'displayName'])",
        // email must be a string
        "email": { ".validate": "newData.isString()" },
        // displayName must be a string and cannot be taken
        "displayName": { ".validate":	"newData.isString() && newData.val().length >= 4 && newData.val().length <= 20 && (!root.child('displayNames').child(newData.val().toLowerCase()).exists() || root.child('displayNames').child(newData.val().toLowerCase()).val() === $uid)" },
        // no other fields can be included
        "$other": { ".validate": false }
      }
    }
  },

  // rules for new modern one
  "rules_new": {
    ".read": "auth !== null && root.child('users').child(auth.uid).child('access').val() >= 2",
    "users": {
      ".read": "auth !== null && data.child(auth.uid).child('access').val() >= 1",
      "$uid": {
        ".read": "auth !== null && auth.uid === $uid",
        ".write": "auth !== null && auth.uid === $uid",
        ".validate": "newData.child('access').val() === data.child('access').val()",
        // "access": { ".write": false },
      	"$other": { ".write": "auth !== null && auth.uid === $uid" }
      }
    }
  }

  // default
  /*
  service cloud.firestore {
    match /databases/{database}/documents {
      match /{document=**} {
        allow read, write;
      }
    }
  }
  */

  // rules was working on but stopped
  // because no simulator atm
  /*
  service cloud.firestore {
    match /databases/{database}/documents {
      function isAuthenticated() {
        return request.auth != null;
      }

      function _getRoles() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
      }

      function isSub() {
        return 1 in _getRoles();
      }

      function isMod() {
        return 2 in _getRoles();
      }

      function isAdmin() {
        return 3 in _getRoles();
      }

      function isOwner() {
        return 4 in _getRoles();
      }

      // User Fields

      // displayName, ip, platform,
      // providers[](displayName, email, phoneNumber,
      // photoURL, providerId, uid), roles[]

      match /users/{userId} {
        allow read: if request.auth.uid == userId;
        // validation
        allow write: if request.resource.data.size() == 5 &&
                        request.resource.data.displayName is string &&
                        request.resource.data.ip is string &&
                        request.resource.data.platform is string &&
                        request.resource.data.provider is map &&
                        request.resource.data.provider.size() == 6 &&
                          request.resource.data.provider.displayName is string &&
                          request.resource.data.provider.email is string &&
                          request.resource.data.provider.phoneNumber is string &&
                          request.resource.data.provider.photoURL is string &&
                          request.resource.data.provider.providerId is string &&
                          request.resource.data.provider.uid is string;
      }

      match /roles/{roleId} {
        allow read: if isAuthenticated();
      }

      match /rooms/{roomId} {
        match /messages/{messageId} {
          allow read, write: if isAuthenticated();
        }
      }
    }
  }
  */
}
